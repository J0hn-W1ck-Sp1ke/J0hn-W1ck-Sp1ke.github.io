<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>单源最短路径</title>
    <link href="/2023/12/26/Dijkstra/"/>
    <url>/2023/12/26/Dijkstra/</url>
    
    <content type="html"><![CDATA[<h1 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h1><ol><li><em><strong>Dijstra</strong></em></li></ol><p>非负权图上单源最短路径<br><strong>堆优化</strong>后时间复杂度O(mlogn)  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//最短路 DK算法</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M=<span class="hljs-number">5e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">2147483647</span>;<br><span class="hljs-type">int</span> n, m, s;<br><span class="hljs-type">int</span> dis[N];<br><span class="hljs-type">int</span> vis[N];<br><span class="hljs-type">int</span> head[N], tot;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br>    <span class="hljs-type">int</span> v, w, next;<br>&#125;e[M];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[++tot]=Edge&#123;v, w, head[u]&#125;;<br>    head[u]=tot;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HNode</span>&#123;<br>    <span class="hljs-type">int</span> u;<br>    <span class="hljs-type">int</span> d;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> HNode&amp; b)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> d&gt;b.d;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;HNode&gt; h;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) dis[i]=INF;<br>    dis[s]=<span class="hljs-number">0</span>;<br>    h.<span class="hljs-built_in">push</span>(HNode&#123;s, dis[s]&#125;);<br>    <span class="hljs-keyword">while</span>(!h.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u=h.<span class="hljs-built_in">top</span>().u;<br>        h.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span>(vis[u]) <span class="hljs-keyword">continue</span>;<br>        vis[u]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[u]; i; i=e[i].next)<br>        &#123;<br>            <span class="hljs-type">int</span> v=e[i].v;<br>            <span class="hljs-type">int</span> w=e[i].w;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[u]+w)<br>            &#123;<br>                dis[v]=dis[u]+w;<br>                h.<span class="hljs-built_in">push</span>(HNode&#123;v, dis[v]&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>, u, v, w; i&lt;=m; ++i) <br>    &#123;<br>        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;<br>        <span class="hljs-built_in">add</span>(u, v, w);<br>    &#125;<br>    <span class="hljs-built_in">Dijkstra</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) cout&lt;&lt;dis[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    cout&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><ol start="2"><li><em><strong>Bellman-Ford</strong></em></li></ol><p>任意图求单源最短路，能检测负环<br><strong>队列优化的SPFA</strong>时间复杂度O(nm)，慎用  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span> &#123;<br>  <span class="hljs-type">int</span> v, w;<br>&#125;;<br><br>vector&lt;edge&gt; e[maxn];<br><span class="hljs-type">int</span> dis[maxn], cnt[maxn], vis[maxn];<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> s)</span> </span>&#123;<br>  <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">63</span>, <span class="hljs-built_in">sizeof</span>(dis));<br>  dis[s] = <span class="hljs-number">0</span>, vis[s] = <span class="hljs-number">1</span>;<br>  q.<span class="hljs-built_in">push</span>(s);<br>  <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>(), vis[u] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> ed : e[u]) &#123;<br>      <span class="hljs-type">int</span> v = ed.v, w = ed.w;<br>      <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + w) &#123;<br>        dis[v] = dis[u] + w;<br>        cnt[v] = cnt[u] + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 记录最短路经过的边数</span><br>        <span class="hljs-keyword">if</span> (cnt[v] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 在不经过负环的情况下，最短路至多经过 n - 1 条边</span><br>        <span class="hljs-comment">// 因此如果经过了多于 n 条边，一定说明经过了负环</span><br>        <span class="hljs-keyword">if</span> (!vis[v]) q.<span class="hljs-built_in">push</span>(v), vis[v] = <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>在保证没有负环的情况下尽量使用Dijkstra，避免风险。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法，图论，最短路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2023/12/25/test/"/>
    <url>/2023/12/25/test/</url>
    
    <content type="html"><![CDATA[<h1 id="测试用页面"><a href="#测试用页面" class="headerlink" title="测试用页面"></a>测试用页面</h1><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><h6 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h6><h2 id="代码如下111"><a href="#代码如下111" class="headerlink" title="代码如下111"></a>代码如下<br><em><strong>111</strong></em></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Hello World!\n&quot;</span>;<span class="hljs-comment">//输出</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
